package godl

import (
	"testing"

	"github.com/stretchr/testify/require"
	"gorgonia.org/gorgonia"
	"gorgonia.org/tensor"
)

func TestGLU(t *testing.T) {
	testCases := []struct {
		desc           string
		input          tensor.Tensor
		vbs            int
		output         int
		expectedShape  tensor.Shape
		expectedErr    string
		expectedOutput []float64
		expectedGrad   []float64
		expectedCost   float64
		fcOpts         *FCOpts
	}{
		{
			desc: "Example 1",
			input: tensor.New(
				tensor.WithShape(6, 2),
				tensor.WithBacking([]float64{0.1, -0.5, 0.3, 0.9, 0.04, -0.3, 0.01, 0.09, -0.1, 0.9, 0.7, 0.04}),
			),
			vbs:            2,
			output:         5,
			expectedShape:  tensor.Shape{6, 5},
			expectedOutput: []float64{-0.26894085629326375, -0.26894085629326375, -0.26894085629326375, -0.26894085629326375, -0.26894085629326375, 0.7310513312982878, 0.7310513312982878, 0.7310513312982878, 0.7310513312982878, 0.7310513312982878, -0.26893025839613094, -0.26893025839613094, -0.26893025839613094, -0.26893025839613094, -0.26893025839613094, 0.73091545632948, 0.73091545632948, 0.73091545632948, 0.73091545632948, 0.73091545632948, 0.7259520054251365, 0.7259520054251365, 0.7259520054251365, 0.7259520054251365, 0.7259520054251365, -0.2685383107725574, -0.2685383107725574, -0.2685383107725574, -0.2685383107725574, -0.2685383107725574},
			expectedGrad:   []float64{0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333},
			expectedCost:   0.23025156126515872,
		},
		// {
		// 	desc: "Example 2",
		// 	input: tensor.New(
		// 		tensor.WithShape(6, 2),
		// 		tensor.WithBacking([]float64{0.1, -0.5, 0.3, 0.9, 0.04, -0.3, 0.01, 0.09, -0.1, 0.9, 0.7, 0.04}),
		// 	),
		// 	vbs:            2,
		// 	output:         5,
		// 	expectedShape:  tensor.Shape{6, 5},
		// 	expectedOutput: []float64{-0.26894085629326375, -0.26894085629326375, -0.26894085629326375, -0.26894085629326375, -0.26894085629326375, 0.7310513312982878, 0.7310513312982878, 0.7310513312982878, 0.7310513312982878, 0.7310513312982878, -0.26893025839613094, -0.26893025839613094, -0.26893025839613094, -0.26893025839613094, -0.26893025839613094, 0.73091545632948, 0.73091545632948, 0.73091545632948, 0.73091545632948, 0.73091545632948, 0.7259520054251365, 0.7259520054251365, 0.7259520054251365, 0.7259520054251365, 0.7259520054251365, -0.2685383107725574, -0.2685383107725574, -0.2685383107725574, -0.2685383107725574, -0.2685383107725574},
		// 	expectedGrad:   []float64{0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333},
		// 	expectedCost:   0.23025156126515872,
		// },
		// {
		// 	desc: "Example 3",
		// 	input: tensor.New(
		// 		tensor.WithShape(6, 2),
		// 		tensor.WithBacking([]float64{0.4, 1.4, 2.4, 3.4, 4.4, 5.4, 6.4, 7.4, 8.4, 9.4, 10.4, 11.4}),
		// 	),
		// 	vbs:    2,
		// 	output: 16,
		// 	fcOpts: &FCOpts{
		// 		InputDimension:  2,
		// 		OutputDimension: 32,
		// 		WithBias:        false,
		// 		WeightsInit:     initDummyWeights,
		// 	},
		// 	expectedShape:  tensor.Shape{6, 16},
		// 	expectedOutput: []float64{-0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, 0.7310574190442755, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, -0.2689413309580682, 0.7310574190442763, 0.7310574190442763, 0.7310574190442763, 0.7310574190442763, 0.7310574190442763, 0.7310574190442763, 0.7310574190442763, 0.7310574190442763, 0.7310574190442763, 0.7310574190442763, 0.7310574190442763, 0.7310574190442763, 0.7310574190442763, 0.7310574190442763, 0.7310574190442763, 0.7310574190442763},
		// 	expectedGrad:   []float64{},
		// 	expectedCost:   0.2310580440431038,
		// },
	}

	for _, tcase := range testCases {
		t.Run(tcase.desc, func(t *testing.T) {
			c := require.New(t)

			tn := NewModel()
			g := tn.ExprGraph()

			input := gorgonia.NewTensor(g, tensor.Float64, tcase.input.Shape().Dims(), gorgonia.WithShape(tcase.input.Shape()...), gorgonia.WithName("input"), gorgonia.WithValue(tcase.input))

			var fc Layer
			if tcase.fcOpts != nil {
				fc = FC(tn, *tcase.fcOpts)
			}

			y, err := GLU(tn, GLUOpts{
				InputDimension:   tcase.vbs,
				OutputDimension:  tcase.output,
				WeightsInit:      initDummyWeights,
				VirtualBatchSize: 2,
				FC:               fc,
			})(input)

			if tcase.expectedErr != "" {
				c.Error(err)

				c.Equal(tcase.expectedErr, err.Error())

				return
			} else {
				c.NoError(err)
			}

			cost := gorgonia.Must(gorgonia.Mean(y.Output))
			_, err = gorgonia.Grad(cost, input)
			c.NoError(err)

			vm := gorgonia.NewTapeMachine(g, gorgonia.BindDualValues(tn.learnables...))
			c.NoError(vm.RunAll())

			t.Logf("y: %v", y.Output.Value())
			t.Logf("dx: %v", input.Deriv().Value())

			yGrad, err := y.Output.Grad()
			c.NoError(err)

			c.Equal(tcase.expectedShape, y.Shape())
			c.InDeltaSlice(tcase.expectedOutput, y.Value().Data(), 1e-5, "actual: %#v", y.Value().Data())
			c.Equal(tcase.expectedGrad, yGrad.Data())
			c.InDelta(tcase.expectedCost, cost.Value().Data(), 1e-5, "actual: %#v", cost.Value().Data())
		})
	}
}
